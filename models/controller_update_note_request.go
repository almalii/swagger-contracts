// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ControllerUpdateNoteRequest controller update note request
//
// swagger:model controller.UpdateNoteRequest
type ControllerUpdateNoteRequest struct {

	// body
	// Required: true
	Body *string `json:"body"`

	// tags
	Tags []string `json:"tags"`

	// title
	// Required: true
	// Max Length: 50
	// Min Length: 1
	Title *string `json:"title"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this controller update note request
func (m *ControllerUpdateNoteRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ControllerUpdateNoteRequest) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("body", "body", m.Body); err != nil {
		return err
	}

	return nil
}

func (m *ControllerUpdateNoteRequest) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	if err := validate.MinLength("title", "body", *m.Title, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("title", "body", *m.Title, 50); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this controller update note request based on context it is used
func (m *ControllerUpdateNoteRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ControllerUpdateNoteRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ControllerUpdateNoteRequest) UnmarshalBinary(b []byte) error {
	var res ControllerUpdateNoteRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
