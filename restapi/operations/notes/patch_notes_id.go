// Code generated by go-swagger; DO NOT EDIT.

package notes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchNotesIDHandlerFunc turns a function with the right signature into a patch notes ID handler
type PatchNotesIDHandlerFunc func(PatchNotesIDParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchNotesIDHandlerFunc) Handle(params PatchNotesIDParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PatchNotesIDHandler interface for that can handle valid patch notes ID params
type PatchNotesIDHandler interface {
	Handle(PatchNotesIDParams, interface{}) middleware.Responder
}

// NewPatchNotesID creates a new http.Handler for the patch notes ID operation
func NewPatchNotesID(ctx *middleware.Context, handler PatchNotesIDHandler) *PatchNotesID {
	return &PatchNotesID{Context: ctx, Handler: handler}
}

/*
	PatchNotesID swagger:route PATCH /notes/{id} notes patchNotesId

# UpdateNote

update note
*/
type PatchNotesID struct {
	Context *middleware.Context
	Handler PatchNotesIDHandler
}

func (o *PatchNotesID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPatchNotesIDParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
